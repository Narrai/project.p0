// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaWorld.Storing;

namespace PizzaWorld.Storing.Migrations
{
    [DbContext(typeof(PizzaWorldContext))]
    [Migration("20210104234142_UpdatingStoreName")]
    partial class UpdatingStoreName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.APizzaModel", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Crust")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderEntityId")
                        .HasColumnType("bigint");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topping")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.HasIndex("OrderEntityId");

                    b.ToTable("Pizzas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("APizzaModel");
                });

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.Crusts", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Crusts");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Name = "stuffed"
                        },
                        new
                        {
                            EntityId = 2L,
                            Name = "thin"
                        },
                        new
                        {
                            EntityId = 3L,
                            Name = "stuffed"
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.PizzaToppings", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("PizzaEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ToppingEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("PizzaEntityId");

                    b.HasIndex("ToppingEntityId");

                    b.ToTable("PizzaToppings");

                    b.HasData(
                        new
                        {
                            EntityId = 1L
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.Prices", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("EntityId");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Price = 10.99f
                        },
                        new
                        {
                            EntityId = 2L,
                            Price = 12.99f
                        },
                        new
                        {
                            EntityId = 3L,
                            Price = 14.99f
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.Sizes", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Name = "small"
                        },
                        new
                        {
                            EntityId = 2L,
                            Name = "medium"
                        },
                        new
                        {
                            EntityId = 3L,
                            Name = "large"
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.Toppings", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Name = "tomato"
                        },
                        new
                        {
                            EntityId = 2L,
                            Name = "grilled chicken"
                        },
                        new
                        {
                            EntityId = 3L,
                            Name = "sauce"
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.Order", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("StoreEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("StoreEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            EntityId = 1L
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.Store", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Name = "One"
                        },
                        new
                        {
                            EntityId = 2L,
                            Name = "Two"
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.User", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("SelectedStoreEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("SelectedStoreEntityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            EntityId = 1L
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.MeatPizza", b =>
                {
                    b.HasBaseType("PizzaWorld.Domain.Abstracts.APizzaModel");

                    b.HasDiscriminator().HasValue("MeatPizza");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Crust = "stuffed",
                            Name = "meat Pizza",
                            Price = 10.99f,
                            Size = "small"
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.VegePizza", b =>
                {
                    b.HasBaseType("PizzaWorld.Domain.Abstracts.APizzaModel");

                    b.HasDiscriminator().HasValue("VegePizza");

                    b.HasData(
                        new
                        {
                            EntityId = 2L,
                            Crust = "thick",
                            Name = "vege Pizza",
                            Price = 12.99f,
                            Size = "medium"
                        });
                });

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.APizzaModel", b =>
                {
                    b.HasOne("PizzaWorld.Domain.Models.Order", null)
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderEntityId");
                });

            modelBuilder.Entity("PizzaWorld.Domain.Abstracts.PizzaToppings", b =>
                {
                    b.HasOne("PizzaWorld.Domain.Abstracts.APizzaModel", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaEntityId");

                    b.HasOne("PizzaWorld.Domain.Abstracts.Toppings", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingEntityId");

                    b.Navigation("Pizza");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.Order", b =>
                {
                    b.HasOne("PizzaWorld.Domain.Models.Store", null)
                        .WithMany("Orders")
                        .HasForeignKey("StoreEntityId");

                    b.HasOne("PizzaWorld.Domain.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.User", b =>
                {
                    b.HasOne("PizzaWorld.Domain.Models.Store", "SelectedStore")
                        .WithMany()
                        .HasForeignKey("SelectedStoreEntityId");

                    b.Navigation("SelectedStore");
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.Store", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PizzaWorld.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
